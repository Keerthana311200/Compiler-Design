#include <stdio.h>
#include <stdlib.h>

// Define the types of nodes in the AST
typedef enum { NODE_INT, NODE_ADD, NODE_MUL } NodeType;

// Define the structure of a node in the AST
typedef struct Node {
    NodeType type;
    union {
        int value;          // For integer values
        struct {
            struct Node* left;
            struct Node* right;
        } op;               // For binary operations
    };
} Node;

// Function to create a new integer node
Node* newIntNode(int value) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->type = NODE_INT;
    node->value = value;
    return node;
}

// Function to create a new binary operation node
Node* newOpNode(NodeType type, Node* left, Node* right) {
    Node* node = (Node*)malloc(sizeof(Node));
    node->type = type;
    node->op.left = left;
    node->op.right = right;
    return node;
}

// Function to generate code from the AST
void generateCode(Node* node) {
    if (node == NULL) return;
    
    switch (node->type) {
        case NODE_INT:
            printf("PUSH %d\n", node->value);
            break;
        case NODE_ADD:
            generateCode(node->op.left);
            generateCode(node->op.right);
            printf("ADD\n");
            break;
        case NODE_MUL:
            generateCode(node->op.left);
            generateCode(node->op.right);
            printf("MUL\n");
            break;
    }
}

// Function to free the allocated memory for the AST
void freeTree(Node* node) {
    if (node == NULL) return;
    
    switch (node->type) {
        case NODE_INT:
            free(node);
            break;
        case NODE_ADD:
        case NODE_MUL:
            freeTree(node->op.left);
            freeTree(node->op.right);
            free(node);
            break;
    }
}

// Main function to test the code generation
int main() {
    // Manually create the AST for the expression (3 + 4) * 5
    Node* n1 = newIntNode(3);
    Node* n2 = newIntNode(4);
    Node* n3 = newOpNode(NODE_ADD, n1, n2);
    Node* n4 = newIntNode(5);
    Node* root = newOpNode(NODE_MUL, n3, n4);

    // Generate and print the code
    printf("Generated code:\n");
    generateCode(root);

    // Free the allocated memory
    freeTree(root);

    return 0;
}
